@page
@model Application.Pages.Orders.IndexModel

@{
    ViewData["Title"] = "Quản lý Đơn hàng";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        /* Page specific styles */
        .page-header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .page-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-bottom: 30px;
        }

        /* Stats cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 15px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #6b7280;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Filter section */
        .filter-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            align-items: end;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .filter-label {
            font-weight: 600;
            color: #374151;
            font-size: 0.85rem;
        }

        .filter-input {
            padding: 8px 12px;
            border: 2px solid rgba(209, 213, 219, 0.5);
            border-radius: 8px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .filter-input:focus {
            outline: none;
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .btn-filter {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-filter:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
        }

        /* Table container */
        .table-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            overflow: hidden;
        }

        /* Custom table */
        .custom-table {
            width: 100%;
            border-collapse: collapse;
            background: transparent;
        }

        .custom-table thead th {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
            border: none;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .custom-table thead th:first-child {
            border-top-left-radius: 12px;
        }

        .custom-table thead th:last-child {
            border-top-right-radius: 12px;
        }

        .custom-table tbody tr {
            transition: all 0.3s ease;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .custom-table tbody tr:hover {
            background: rgba(79, 70, 229, 0.05);
            transform: scale(1.01);
        }

        .custom-table tbody td {
            padding: 15px;
            border: none;
            vertical-align: middle;
        }

        .custom-table tbody tr:last-child td:first-child {
            border-bottom-left-radius: 12px;
        }

        .custom-table tbody tr:last-child td:last-child {
            border-bottom-right-radius: 12px;
        }

        /* Price styling */
        .price-value {
            font-weight: 700;
            color: #059669;
            font-size: 1.1rem;
        }

        .price-currency {
            font-size: 0.8rem;
            color: #6b7280;
            margin-left: 4px;
        }

        /* Date styling */
        .date-value {
            color: #4f46e5;
            font-weight: 600;
        }

        /* User info */
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 0.8rem;
        }

        .user-name {
            font-weight: 600;
            color: #1f2937;
        }

        /* Doctor info */
        .doctor-info {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .doctor-badge {
            background: rgba(59, 130, 246, 0.1);
            color: #2563eb;
            padding: 4px 10px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        /* Diagnosis badge */
        .diagnosis-badge {
            background: rgba(245, 158, 11, 0.1);
            color: #d97706;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* Action buttons */
        .btn-details {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            text-decoration: none;
            font-size: 0.8rem;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-details:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.4);
            color: white;
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6b7280;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state h3 {
            margin-bottom: 10px;
            color: #374151;
        }

        .empty-state p {
            margin-bottom: 20px;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .page-title {
                font-size: 2rem;
            }

            .table-container {
                padding: 20px;
                overflow-x: auto;
            }

            .custom-table {
                min-width: 800px;
            }

            .custom-table thead th,
            .custom-table tbody td {
                padding: 10px;
                font-size: 0.8rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .filter-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

<div class="page-header">
    <h1 class="page-title">
        <i class="fas fa-shopping-cart me-3"></i>
        Quản lý Đơn hàng
    </h1>
    <p class="page-subtitle">Danh sách tất cả đơn hàng và giao dịch trong hệ thống</p>
</div>

<!-- Stats Cards -->
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(34, 197, 94, 0.1); color: #16a34a;">
            <i class="fas fa-shopping-cart"></i>
        </div>
        <div class="stat-value" id="totalOrders">@Model.Order.Count()</div>
        <div class="stat-label">Tổng đơn hàng</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(59, 130, 246, 0.1); color: #2563eb;">
            <i class="fas fa-dollar-sign"></i>
        </div>
        <div class="stat-value" id="totalRevenue">@Model.Order.Sum(o => o.TotalPrice).ToString("N0")</div>
        <div class="stat-label">Tổng doanh thu (VNĐ)</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(245, 158, 11, 0.1); color: #d97706;">
            <i class="fas fa-calendar-day"></i>
        </div>
        <div class="stat-value" id="todayOrders">@Model.Order.Count(o => o.CreateAt.Date == DateTime.Today)</div>
        <div class="stat-label">Đơn hàng hôm nay</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6;">
            <i class="fas fa-chart-line"></i>
        </div>
        <div class="stat-value" id="avgOrderValue">@(Model.Order.Any() ? Model.Order.Average(o => o.TotalPrice).ToString("N0") : "0")</div>
        <div class="stat-label">Giá trị TB (VNĐ)</div>
    </div>
</div>

<!-- Filter Section -->
<div class="filter-section">
    <div class="filter-grid">
        <div class="filter-group">
            <label class="filter-label">Tìm kiếm theo bệnh nhân</label>
            <input type="text" class="filter-input" placeholder="Nhập tên bệnh nhân..." id="searchPatient">
        </div>
        <div class="filter-group">
            <label class="filter-label">Từ ngày</label>
            <input type="date" class="filter-input" id="dateFrom">
        </div>
        <div class="filter-group">
            <label class="filter-label">Đến ngày</label>
            <input type="date" class="filter-input" id="dateTo">
        </div>
        <div class="filter-group">
            <label class="filter-label">Bác sĩ</label>
            <input type="text" class="filter-input" placeholder="Nhập mã bác sĩ..." id="searchDoctor">
        </div>
        <div class="filter-group">
            <button type="button" class="btn-filter" onclick="applyFilters()">
                <i class="fas fa-search me-1"></i>
                Tìm kiếm
            </button>
        </div>
    </div>
</div>

<div class="table-container">
    @if (Model.Order != null && Model.Order.Any())
    {
        <table class="custom-table">
            <thead>
                <tr>
                    <th><i class="fas fa-dollar-sign me-2"></i>Tổng tiền</th>
                    <th><i class="fas fa-calendar me-2"></i>Ngày tạo</th>
                    <th><i class="fas fa-user me-2"></i>Bệnh nhân</th>
                    <th><i class="fas fa-user-md me-2"></i>Bác sĩ</th>
                    <th><i class="fas fa-notes-medical me-2"></i>Chẩn đoán</th>
                    <th><i class="fas fa-cogs me-2"></i>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Order)
                {
                    <tr data-order-id="@item.Id">
                        <td>
                            <span class="price-value">@item.TotalPrice.ToString("N0")</span>
                            <span class="price-currency">VNĐ</span>
                        </td>
                        <td>
                            <span class="date-value">@item.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
                        </td>
                        <td>
                            <div class="user-info">
                                <div class="user-avatar">
                                    @item.User.Username.Substring(0, 1).ToUpper()
                                </div>
                                <span class="user-name">@item.User.Username</span>
                            </div>
                        </td>
                        <td>
                            <div class="doctor-info">
                                <i class="fas fa-user-md text-primary"></i>
                                <span class="doctor-badge">@item.Doctor.LicenseNumber</span>
                            </div>
                        </td>
                        <td>
                            <span class="diagnosis-badge" title="@item.MedicalRecord.Diagnosis">
                                @item.MedicalRecord.Diagnosis
                            </span>
                        </td>
                        <td>
                            <a asp-page="./Details" asp-route-id="@item.Id" class="btn-details">
                                <i class="fas fa-eye"></i>
                                Chi tiết
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-shopping-cart"></i>
            <h3>Chưa có đơn hàng nào</h3>
            <p>Hiện tại chưa có đơn hàng nào trong hệ thống.</p>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Animate table rows on load
            const rows = document.querySelectorAll('.custom-table tbody tr');
            rows.forEach((row, index) => {
                row.style.opacity = '0';
                row.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    row.style.transition = 'all 0.5s ease';
                    row.style.opacity = '1';
                    row.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // Animate stats cards
            const statCards = document.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    card.style.transition = 'all 0.6s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 150);
            });

            // Set default date filters (last 30 days)
            const dateFrom = document.getElementById('dateFrom');
            const dateTo = document.getElementById('dateTo');
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
            
            dateFrom.value = thirtyDaysAgo.toISOString().split('T')[0];
            dateTo.value = today.toISOString().split('T')[0];
        });

        function applyFilters() {
            const searchPatient = document.getElementById('searchPatient').value.toLowerCase();
            const dateFrom = document.getElementById('dateFrom').value;
            const dateTo = document.getElementById('dateTo').value;
            const searchDoctor = document.getElementById('searchDoctor').value.toLowerCase();
            
            const rows = document.querySelectorAll('.custom-table tbody tr');
            let visibleCount = 0;
            
            rows.forEach(row => {
                const patientName = row.querySelector('.user-name').textContent.toLowerCase();
                const orderDate = row.querySelector('.date-value').textContent;
                const doctorLicense = row.querySelector('.doctor-badge').textContent.toLowerCase();
                
                let shouldShow = true;
                
                // Filter by patient name
                if (searchPatient && !patientName.includes(searchPatient)) {
                    shouldShow = false;
                }
                
                // Filter by doctor
                if (searchDoctor && !doctorLicense.includes(searchDoctor)) {
                    shouldShow = false;
                }
                
                // Filter by date range
                if (dateFrom || dateTo) {
                    const orderDateObj = new Date(orderDate.split(' ')[0].split('/').reverse().join('-'));
                    
                    if (dateFrom && orderDateObj < new Date(dateFrom)) {
                        shouldShow = false;
                    }
                    
                    if (dateTo && orderDateObj > new Date(dateTo)) {
                        shouldShow = false;
                    }
                }
                
                if (shouldShow) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });
            
            // Show empty state if no results
            const tableContainer = document.querySelector('.table-container');
            const existingEmptyState = tableContainer.querySelector('.filter-empty-state');
            
            if (existingEmptyState) {
                existingEmptyState.remove();
            }
            
            if (visibleCount === 0) {
                const emptyState = document.createElement('div');
                emptyState.className = 'empty-state filter-empty-state';
                emptyState.innerHTML = `
                    <i class="fas fa-search"></i>
                    <h3>Không tìm thấy kết quả</h3>
                    <p>Không có đơn hàng nào phù hợp với bộ lọc của bạn.</p>
                `;
                tableContainer.appendChild(emptyState);
            }
        }

        // Real-time search
        document.getElementById('searchPatient').addEventListener('input', applyFilters);
        document.getElementById('searchDoctor').addEventListener('input', applyFilters);
        document.getElementById('dateFrom').addEventListener('change', applyFilters);
        document.getElementById('dateTo').addEventListener('change', applyFilters);
    </script>
}
