@page
@model Application.Pages.UserNotifications.IndexModel

!@{
    ViewData["Title"] = "Thông báo";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        /* Page specific styles */
        .page-header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .page-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-bottom: 30px;
        }

        /* Stats summary */
        .notification-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            text-align: center;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .stat-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            margin: 0 auto 10px;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #6b7280;
            font-size: 0.8rem;
            font-weight: 500;
        }

        /* Filter section */
        .filter-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            align-items: end;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .filter-label {
            font-weight: 600;
            color: #374151;
            font-size: 0.85rem;
        }

        .filter-input {
            padding: 8px 12px;
            border: 2px solid rgba(209, 213, 219, 0.5);
            border-radius: 8px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .filter-input:focus {
            outline: none;
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .btn-filter {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-filter:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
        }

        /* Notifications container */
        .notifications-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            overflow: hidden;
        }

        /* Notification items */
        .notification-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .notification-item {
            background: rgba(248, 250, 252, 0.8);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(226, 232, 240, 0.5);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .notification-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .notification-item.unread {
            border-left: 4px solid #4f46e5;
            background: rgba(79, 70, 229, 0.02);
        }

        .notification-item.read {
            opacity: 0.8;
        }

        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
        }

        .notification-title {
            font-weight: 700;
            color: #1f2937;
            font-size: 1.1rem;
            margin: 0;
            flex: 1;
        }

        .notification-meta {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 5px;
        }

        .notification-time {
            font-size: 0.8rem;
            color: #6b7280;
            font-weight: 500;
        }

        .notification-status {
            font-size: 0.7rem;
            padding: 2px 8px;
            border-radius: 10px;
            font-weight: 600;
        }

        .status-read {
            background: rgba(107, 114, 128, 0.1);
            color: #6b7280;
        }

        .status-unread {
            background: rgba(79, 70, 229, 0.1);
            color: #4f46e5;
        }

        .notification-message {
            color: #4b5563;
            line-height: 1.5;
            margin-bottom: 15px;
        }

        .notification-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .notification-type {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .type-system {
            background: rgba(59, 130, 246, 0.1);
            color: #2563eb;
        }

        .type-appointment {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        .type-medication {
            background: rgba(245, 158, 11, 0.1);
            color: #d97706;
        }

        .type-test {
            background: rgba(139, 92, 246, 0.1);
            color: #8b5cf6;
        }

        .type-general {
            background: rgba(107, 114, 128, 0.1);
            color: #6b7280;
        }

        /* Action buttons */
        .notification-actions {
            display: flex;
            gap: 8px;
        }

        .btn-mark-read {
            background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-mark-read:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
        }

        .btn-mark-read:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6b7280;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state h3 {
            margin-bottom: 10px;
            color: #374151;
        }

        .empty-state p {
            margin-bottom: 20px;
        }

        /* Connection status */
        .connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .status-connected {
            background: rgba(34, 197, 94, 0.9);
            color: white;
        }

        .status-disconnected {
            background: rgba(239, 68, 68, 0.9);
            color: white;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .page-title {
                font-size: 2rem;
            }

            .notifications-container {
                padding: 20px;
            }

            .notification-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .notification-meta {
                align-items: flex-start;
            }

            .notification-footer {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .filter-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

<div class="page-header">
    <h1 class="page-title">
        <i class="fas fa-bell me-3"></i>
        Thông báo
    </h1>
    <p class="page-subtitle">Trung tâm thông báo và cập nhật hệ thống</p>
</div>

<!-- Connection Status -->
<div id="connectionStatus" class="connection-status status-disconnected">
    <i class="fas fa-circle me-1"></i>
    Đang kết nối...
</div>

<!-- Notification Stats -->
<div class="notification-stats">
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(79, 70, 229, 0.1); color: #4f46e5;">
            <i class="fas fa-bell"></i>
        </div>
        <div class="stat-value" id="totalNotifications">@Model.UserNotification.Count()</div>
        <div class="stat-label">Tổng thông báo</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(34, 197, 94, 0.1); color: #16a34a;">
            <i class="fas fa-envelope-open"></i>
        </div>
        <div class="stat-value" id="readNotifications">@Model.UserNotification.Count(n => n.IsRead)</div>
        <div class="stat-label">Đã đọc</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(239, 68, 68, 0.1); color: #dc2626;">
            <i class="fas fa-envelope"></i>
        </div>
        <div class="stat-value" id="unreadNotifications">@Model.UserNotification.Count(n => !n.IsRead)</div>
        <div class="stat-label">Chưa đọc</div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: rgba(245, 158, 11, 0.1); color: #d97706;">
            <i class="fas fa-clock"></i>
        </div>
        <div class="stat-value" id="todayNotifications">@Model.UserNotification.Count(n => n.DeliveredAt?.Date == DateTime.Today)</div>
        <div class="stat-label">Hôm nay</div>
    </div>
</div>

<!-- Filter Section -->
<div class="filter-section">
    <div class="filter-grid">
        <div class="filter-group">
            <label class="filter-label">Tìm kiếm thông báo</label>
            <input type="text" class="filter-input" placeholder="Nhập tiêu đề hoặc nội dung..." id="searchNotification">
        </div>
        <div class="filter-group">
            <label class="filter-label">Loại thông báo</label>
            <select class="filter-input" id="filterType">
                <option value="">Tất cả loại</option>
                <option value="System">Hệ thống</option>
                <option value="Appointment">Lịch hẹn</option>
                <option value="Medication">Thuốc</option>
                <option value="TestResult">Kết quả xét nghiệm</option>
            </select>
        </div>
        <div class="filter-group">
            <label class="filter-label">Trạng thái</label>
            <select class="filter-input" id="filterStatus">
                <option value="">Tất cả</option>
                <option value="unread">Chưa đọc</option>
                <option value="read">Đã đọc</option>
            </select>
        </div>
        <div class="filter-group">
            <button type="button" class="btn-filter" onclick="applyFilters()">
                <i class="fas fa-search me-1"></i>
                Lọc
            </button>
        </div>
    </div>
</div>

<div class="notifications-container">
    @if (Model.UserNotification != null && Model.UserNotification.Any())
    {
        <div class="notification-list">
            @foreach (var item in Model.UserNotification.OrderByDescending(n => n.DeliveredAt))
            {
                <div class="notification-item @(item.IsRead ? "read" : "unread")" data-notification-id="@item.NotificationId">
                    <div class="notification-header">
                        <h4 class="notification-title">@item.Title</h4>
                        <div class="notification-meta">
                            <span class="notification-time">@(item.DeliveredAt?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</span>
                            <span class="notification-status @(item.IsRead ? "status-read" : "status-unread")">
                                @(item.IsRead ? "Đã đọc" : "Chưa đọc")
                            </span>
                        </div>
                    </div>
                    
                    <div class="notification-message">
                        @item.Message
                    </div>
                    
                    <div class="notification-footer">
                        <div class="notification-type @GetTypeClass(item.NotificationType)">
                            <i class="@GetTypeIcon(item.NotificationType)"></i>
                            @GetTypeText(item.NotificationType)
                        </div>
                        
                        <div class="notification-actions">
                            @if (!item.IsRead)
                            {
                                <button class="btn-mark-read" onclick="markAsRead('@item.NotificationId')">
                                    <i class="fas fa-check me-1"></i>
                                    Đánh dấu đã đọc
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-bell-slash"></i>
            <h3>Chưa có thông báo nào</h3>
            <p>Bạn sẽ nhận được thông báo khi có cập nhật mới từ hệ thống.</p>
        </div>
    }
</div>

@functions {
    private string GetTypeClass(Repository.Constants.NotificationType type)
    {
        return type switch
        {
            Repository.Constants.NotificationType.MedicationTime => "type-medication",
            _ => "type-general"
        };
    }
    
    private string GetTypeIcon(Repository.Constants.NotificationType type)
    {
        return type switch
        {
            Repository.Constants.NotificationType.MedicationTime => "fas fa-pills",
            _ => "fas fa-info-circle"
        };
    }
    
    private string GetTypeText(Repository.Constants.NotificationType type)
    {
        return type switch
        {
            Repository.Constants.NotificationType.MedicationTime => "Thời gian uống thuốc",
            _ => "Chung"
        };
    }
}

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let connection;
        
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize SignalR connection
            initializeConnection();
            
            // Animate notification items on load
            const notifications = document.querySelectorAll('.notification-item');
            notifications.forEach((notification, index) => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    notification.style.transition = 'all 0.5s ease';
                    notification.style.opacity = '1';
                    notification.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // Animate stats cards
            const statCards = document.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    card.style.transition = 'all 0.6s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 150);
            });

            // Real-time search
            document.getElementById('searchNotification').addEventListener('input', applyFilters);
            document.getElementById('filterType').addEventListener('change', applyFilters);
            document.getElementById('filterStatus').addEventListener('change', applyFilters);
        });

        function initializeConnection() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/notifications")
                .build();

            connection.start().then(function () {
                updateConnectionStatus(true);
                console.log("SignalR Connected");
                
                connection.on("MedicationTimeNotificationTriggered", function () {
                    showToast("Có thông báo mới!", "info");
                    setTimeout(() => location.reload(), 1000);
                });
                
            }).catch(function (err) {
                updateConnectionStatus(false);
                console.error("SignalR Connection Error: ", err);
                
                // Retry connection after 5 seconds
                setTimeout(initializeConnection, 5000);
            });

            connection.onclose(function () {
                updateConnectionStatus(false);
                // Retry connection after 5 seconds
                setTimeout(initializeConnection, 5000);
            });
        }

        function updateConnectionStatus(connected) {
            const statusEl = document.getElementById('connectionStatus');
            if (connected) {
                statusEl.className = 'connection-status status-connected';
                statusEl.innerHTML = '<i class="fas fa-circle me-1"></i>Đã kết nối';
                setTimeout(() => {
                    statusEl.style.opacity = '0';
                }, 3000);
            } else {
                statusEl.className = 'connection-status status-disconnected';
                statusEl.innerHTML = '<i class="fas fa-circle me-1"></i>Mất kết nối';
                statusEl.style.opacity = '1';
            }
        }

        function applyFilters() {
            const searchTerm = document.getElementById('searchNotification').value.toLowerCase();
            const typeFilter = document.getElementById('filterType').value.toLowerCase();
            const statusFilter = document.getElementById('filterStatus').value;
            
            const notifications = document.querySelectorAll('.notification-item');
            let visibleCount = 0;
            
            notifications.forEach(notification => {
                const title = notification.querySelector('.notification-title').textContent.toLowerCase();
                const message = notification.querySelector('.notification-message').textContent.toLowerCase();
                const type = notification.querySelector('.notification-type').textContent.toLowerCase();
                const isRead = notification.classList.contains('read');
                
                let shouldShow = true;
                
                // Filter by search term
                if (searchTerm && !title.includes(searchTerm) && !message.includes(searchTerm)) {
                    shouldShow = false;
                }
                
                // Filter by type
                if (typeFilter && !type.includes(typeFilter)) {
                    shouldShow = false;
                }
                
                // Filter by status
                if (statusFilter === 'read' && !isRead) {
                    shouldShow = false;
                } else if (statusFilter === 'unread' && isRead) {
                    shouldShow = false;
                }
                
                if (shouldShow) {
                    notification.style.display = '';
                    visibleCount++;
                } else {
                    notification.style.display = 'none';
                }
            });
            
            // Show empty state if no results
            const container = document.querySelector('.notification-list');
            const existingEmptyState = container.parentElement.querySelector('.filter-empty-state');
            
            if (existingEmptyState) {
                existingEmptyState.remove();
            }
            
            if (visibleCount === 0 && notifications.length > 0) {
                const emptyState = document.createElement('div');
                emptyState.className = 'empty-state filter-empty-state';
                emptyState.innerHTML = `
                    <i class="fas fa-search"></i>
                    <h3>Không tìm thấy kết quả</h3>
                    <p>Không có thông báo nào phù hợp với bộ lọc của bạn.</p>
                `;
                container.parentElement.appendChild(emptyState);
            }
        }

        function markAsRead(notificationId) {
            // Here you would typically make an AJAX call to mark the notification as read
            console.log('Marking notification as read:', notificationId);
            
            const notification = document.querySelector(`[data-notification-id="${notificationId}"]`);
            if (notification) {
                notification.classList.remove('unread');
                notification.classList.add('read');
                
                const status = notification.querySelector('.notification-status');
                status.textContent = 'Đã đọc';
                status.className = 'notification-status status-read';
                
                const button = notification.querySelector('.btn-mark-read');
                if (button) {
                    button.remove();
                }
                
                // Update stats
                updateStats();
            }
            
            showToast("Đã đánh dấu thông báo là đã đọc", "success");
        }

        function updateStats() {
            const notifications = document.querySelectorAll('.notification-item');
            const readCount = document.querySelectorAll('.notification-item.read').length;
            const unreadCount = notifications.length - readCount;
            
            document.getElementById('readNotifications').textContent = readCount;
            document.getElementById('unreadNotifications').textContent = unreadCount;
        }

        function showToast(message, type = 'info') {
            // Simple toast notification
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 80px;
                right: 20px;
                background: ${type === 'success' ? '#22c55e' : type === 'error' ? '#ef4444' : '#4f46e5'};
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                font-weight: 600;
                z-index: 1001;
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.3s ease;
            `;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    </script>
}
